set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" CUSTOMS PLUG-IN "

" Plug 'erichdongubler/vim-sublime-monokai'
" Plug 'sickill/vim-monokai'
Plugin 'scrooloose/nerdtree'
Plugin 'PhilRunninger/nerdtree-visual-selection'
Plugin 'crusoexia/vim-monokai'
Plugin 'sainnhe/sonokai'
Plugin 'morhetz/gruvbox'
" JS
" Plug 'mxw/vim-jsx'
" Plug 'pangloss/vim-javascript'

" Polyglot: Languages for VIM.
" A collection of language packs for Vim.
" One to rule them all, one to find them, one to bring them all and in the darkness bind them.
" It won't affect your startup time, as scripts are loaded only on demand*.
" It installs and updates 120+ times faster than the 603 packages it consists of.
" It is also more secure (scripts loaded for every filetype are generated by vim-polyglot)
" Best syntax and indentation support (no other features). Hand-selected language packs.
Plugin 'sheerun/vim-polyglot'

" Emmet: Html Completion
Plugin 'mattn/emmet-vim'

" FZF: Fuzzy finder on command line.
" Install fzf.vim by the author and fzf package.
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }

Plugin 'ycm-core/YouCompleteMe'


" CUSTOMS PLUG-IN END"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"" General
let mapleader = " "
set number		" Show line numbers
set linebreak		" Break lines at word (requires Wrap lines)
set showbreak=+++	" Wrap-broken line prefix
set textwidth=100	" Line wrap (number of cols)
set showmatch		" Highlight matching brace
set visualbell		" Use visual bell (no beeping)
set hlsearch		" Highlight all search results
set smartcase		" Enable smart-case search
set ignorecase		" Always case-insensitive
set incsearch		" Searches for strings incrementally
set autoindent		" Auto-indent new lines
set shiftwidth=4	" Number of auto-indent spaces
set smartindent		" Enable smart-indent
set smarttab		" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab

   
"" Advanced
set ruler 			" Show row and column ruler information
set undolevels=1000		" Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour

set clipboard=unnamedplus

"" Tabs
nnoremap t0  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap t$  :tablast<CR>
nnoremap te  :tabedit<Space>
nnoremap tn  :tabnew<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Alternatively use
" "nnoremap th :tabnext<CR>
" "nnoremap tl :tabprev<CR>
" "nnoremap tn :tabnew<CR>

nnoremap <Leader>l <C-w>l
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k

" Emmet
let g:user_emmet_leader_key=','

"""""""""""""""""""""""""

" Plugin configurations "

"""""""""""""""""""""""""


syntax on
set termguicolors
set t_Co=256
" let g:sublimemonokai_term_italic = 1
colorscheme gruvbox
set background=dark
"" Vim Javascript
" let g:javascript_conceal_function             = "∆í"
" let g:javascript_conceal_null                 = "√∏"
" let g:javascript_conceal_this                 = "@"
" let g:javascript_conceal_return               = "‚áö"
" let g:javascript_conceal_undefined            = "¬ø"
" let g:javascript_conceal_NaN                  = "‚Ñï"
" let g:javascript_conceal_prototype            = "¬∂"
" let g:javascript_conceal_static               = "‚Ä¢"
" let g:javascript_conceal_super                = "Œ©"
" let g:javascript_conceal_arrow_function       = "‚áí"
" let g:javascript_conceal_noarg_arrow_function = "üûÖ"
" let g:javascript_conceal_underscore_arrow_function = "üûÖ"


"" NERD TREE Set-Up

" let NERDTreeQuitOnOpen = 1					" Automatically quit NerdTree when you open a file
let NERDTreeAutoDeleteBuffer = 1		" Automatically delete the buffer of the fule you just deleted
let NERDTreeMinimalUI = 1						" Making it prettier
let NERDTreeDirArrows = 1						" Enable directions arrows

"" Open NerdTree by default
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists(‚Äús:std_in‚Äù) | NERDTree | endif

nnoremap <Leader>t :NERDTreeToggle<Enter>			
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>

"" Close tab if only the remaining window is NerdTree
"autocmd bufenter * if (winnr(‚Äú$‚Äù) == 1 && exists(‚Äúb:NERDTreeType‚Äù) && b:NERDTreeType == ‚Äúprimary‚Äù) | q | endif

set pyxversion=3
" Coc provides (with the help of Jedi) some basic IDE capabilities like

" Going To definition
"nmap <silent> gd <Plug>(coc-definition)
" Displaying documentation (in the floating window!)
"nnoremap <silent> K :call <SID>show_documentation()<CR>
"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction
" Smart rename (renames the exports across all files)
"nmap <leader>rn <Plug>(coc-rename)

let g:ycm_python_binary_path = 'python3'
nnoremap gd  :YcmCompleter GoToDefinition<CR>
nnoremap bb <C-o>
" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_min_num_identifier_candidate_chars = 1
let g:ycm_enable_diagnostic_highlighting = 0
"let g:ycm_autoclose_preview_window_after_completion=1
" Don't show YCM's preview window [ I find it really annoying ]
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0

" for python
let g:ycm_semantic_triggers = {
	\   'python': [ 're!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)', 're!\w{2}' ]
	\ }

