call plug#begin('~/AppData/Local/nvim/plugged')
" Plug 'erichdongubler/vim-sublime-monokai'
" Plug 'sickill/vim-monokai'
Plug 'scrooloose/nerdtree'
Plug 'PhilRunninger/nerdtree-visual-selection'
Plug 'crusoexia/vim-monokai'
Plug 'sainnhe/sonokai'
Plug 'morhetz/gruvbox'
" JS
" Plug 'mxw/vim-jsx'
" Plug 'pangloss/vim-javascript'

" Polyglot: Languages for VIM.
" A collection of language packs for Vim.
" One to rule them all, one to find them, one to bring them all and in the darkness bind them.
" It won't affect your startup time, as scripts are loaded only on demand*.
" It installs and updates 120+ times faster than the 603 packages it consists of.
" It is also more secure (scripts loaded for every filetype are generated by vim-polyglot)
" Best syntax and indentation support (no other features). Hand-selected language packs.
Plug 'sheerun/vim-polyglot'

" Emmet: Html Completion
Plug 'mattn/emmet-vim'

" FZF: Fuzzy finder on command line.
" Install fzf.vim by the author and fzf package.
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" CodeOfCompletion: Intellisell for NVIM.
" Stable version of coc
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
"
Plug 'davidhalter/jedi'
Plug 'deoplete-plugins/deoplete-jedi'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

let g:deoplete#enable_at_startup = 1


"" General
let mapleader = " "
set number		" Show line numbers
set linebreak		" Break lines at word (requires Wrap lines)
set showbreak=+++	" Wrap-broken line prefix
set textwidth=100	" Line wrap (number of cols)
set showmatch		" Highlight matching brace
set visualbell		" Use visual bell (no beeping)
set hlsearch		" Highlight all search results
set smartcase		" Enable smart-case search
set ignorecase		" Always case-insensitive
set incsearch		" Searches for strings incrementally
set autoindent		" Auto-indent new lines
set shiftwidth=4	" Number of auto-indent spaces
set smartindent		" Enable smart-indent
set smarttab		" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab

   
"" Advanced
set ruler 			" Show row and column ruler information
set undolevels=1000		" Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour

set clipboard=unnamedplus

"" Tabs
nnoremap t0  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap t$  :tablast<CR>
nnoremap te  :tabedit<Space>
nnoremap tn  :tabnew<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Alternatively use
" "nnoremap th :tabnext<CR>
" "nnoremap tl :tabprev<CR>
" "nnoremap tn :tabnew<CR>

nnoremap <Leader>l <C-w>l
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k

" Emmet
let g:user_emmet_leader_key=','

"""""""""""""""""""""""""

" Plugin configurations "

"""""""""""""""""""""""""


syntax on
set termguicolors
set t_Co=256
" let g:sublimemonokai_term_italic = 1
colorscheme gruvbox
set background=dark
"" Vim Javascript
" let g:javascript_conceal_function             = "∆í"
" let g:javascript_conceal_null                 = "√∏"
" let g:javascript_conceal_this                 = "@"
" let g:javascript_conceal_return               = "‚áö"
" let g:javascript_conceal_undefined            = "¬ø"
" let g:javascript_conceal_NaN                  = "‚Ñï"
" let g:javascript_conceal_prototype            = "¬∂"
" let g:javascript_conceal_static               = "‚Ä¢"
" let g:javascript_conceal_super                = "Œ©"
" let g:javascript_conceal_arrow_function       = "‚áí"
" let g:javascript_conceal_noarg_arrow_function = "üûÖ"
" let g:javascript_conceal_underscore_arrow_function = "üûÖ"


"" NERD TREE Set-Up

" let NERDTreeQuitOnOpen = 1					" Automatically quit NerdTree when you open a file
let NERDTreeAutoDeleteBuffer = 1		" Automatically delete the buffer of the fule you just deleted
let NERDTreeMinimalUI = 1						" Making it prettier
let NERDTreeDirArrows = 1						" Enable directions arrows

"" Open NerdTree by default
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists(‚Äús:std_in‚Äù) | NERDTree | endif

nnoremap <Leader>t :NERDTreeToggle<Enter>			
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>

"" Close tab if only the remaining window is NerdTree
"autocmd bufenter * if (winnr(‚Äú$‚Äù) == 1 && exists(‚Äúb:NERDTreeType‚Äù) && b:NERDTreeType == ‚Äúprimary‚Äù) | q | endif

set pyxversion=3
" Coc provides (with the help of Jedi) some basic IDE capabilities like

" Going To definition
nmap <silent> gd <Plug>(coc-definition)
" Displaying documentation (in the floating window!)
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Smart rename (renames the exports across all files)
nmap <leader>rn <Plug>(coc-rename)
